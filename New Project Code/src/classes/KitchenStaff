package GUI;

import java.awt.EventQueue;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JList;
import javax.swing.JButton;
import java.awt.GridLayout;
import javax.swing.JTable;
import javax.swing.JComboBox;
import javax.swing.LayoutStyle.ComponentPlacement;
import net.proteanit.sql.DbUtils;
import javax.swing.JLabel;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import java.awt.Button;
import javax.swing.JScrollPane;
import java.awt.Font;

public class KitchenStaff {
	Connection conn = null;
	ResultSet rs = null;
	PreparedStatement pst = null;
	private JFrame frame;
	private JTable table;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					KitchenStaff window = new KitchenStaff();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}	   
			}
		});
	}

	/**
	 * Create the application.
	 */
	public KitchenStaff() {
		initialize();
		conn = ConnectionDB.connectDB();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		//frame.setBounds(100, 100, 659, 385);
		frame.setBounds(100, 100, 950, 550);
		frame.getContentPane().setBackground(new Color(115, 168, 100));
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


///////////////////// ORDER STATUS COMBO BOX ////////////////////////////////////////////////	
		JLabel StatusLabel = new JLabel("Order Status");
		StatusLabel.setForeground(new Color(0, 0, 0));
		StatusLabel.setFont(new Font("Tahoma", Font.PLAIN, 20));
		JComboBox<String> OrderStatus = new JComboBox<String>();
		OrderStatus.setForeground(new Color(0, 0, 0));
		OrderStatus.setBackground(new Color(255, 255, 102));
		OrderStatus.setFont(new Font("Tahoma", Font.PLAIN, 20));
		OrderStatus.setModel(new DefaultComboBoxModel(new String[] {"Not Ready", "Ready"}));
		try
		{
			java.sql.ResultSet rs;
			java.sql.Statement st;
			Class.forName("com.mysql.jdbc.Driver");
			java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Fast_Food","root","password");
			st = conn.createStatement();
			String s = "Select Order_Status from fast_food.order;";
			rs = st.executeQuery(s);
		}
		catch (Exception x2)
		{
			System.out.print(x2);
			JOptionPane.showMessageDialog(null, "Error");
		}

///////////////// ORDER NUMBER COMBO BOX /////////////////////////////////////////////////////	
		JLabel NumberLabel = new JLabel("Order Number");
		NumberLabel.setForeground(new Color(0, 0, 0));
		NumberLabel.setFont(new Font("Tahoma", Font.PLAIN, 20));
		JComboBox<String> OrderNum = new JComboBox();
		OrderNum.setForeground(new Color(0, 0, 0));
		OrderNum.setBackground(new Color(255, 255, 102));
		OrderNum.setFont(new Font("Tahoma", Font.PLAIN, 20));
		OrderNum.setModel(new DefaultComboBoxModel(new String[] {"Select Order"}));
		try
		{
			java.sql.ResultSet rs;
			java.sql.Statement st;
			Class.forName("com.mysql.jdbc.Driver");
			java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Fast_Food","root","password");
			st = conn.createStatement();
			String s = "Select Order_Number from fast_food.order;";
			rs = st.executeQuery(s);
			while(rs.next())
			{
				OrderNum.addItem(rs.getString(1));
			}
		}
		catch (Exception x2)
		{
			System.out.print(x2);
			JOptionPane.showMessageDialog(null, "Error");
		}
		OrderNum.addActionListener(new ActionListener()
		{
		    public void actionPerformed(ActionEvent arg0) {
		    	try {
		    	Class.forName("com.mysql.jdbc.Driver");
				java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Fast_Food","root","password");
		        	String s = "Select * from fast_food.order WHERE Order_Number = ?";
		        	PreparedStatement pst = conn.prepareStatement(s);
		        	pst.setString(1, (String)OrderNum.getSelectedItem());
		        	java.sql.ResultSet rs=pst.executeQuery();
		        	table.setModel(DbUtils.resultSetToTableModel(rs));				        
		        	pst.close();
					} catch (SQLException | ClassNotFoundException e1) 
		    	{						
						System.out.print(e1);
					}					
		        }
		    });

//////////////////////////// SET STATUS BUTTON //////////////////////////////////////////////////////		
		JButton SetStatus = new JButton("Set Status");
		SetStatus.setForeground(new Color(0, 0, 0));
		SetStatus.setBackground(new Color(255, 255, 102));
		SetStatus.setFont(new Font("Tahoma", Font.PLAIN, 18));
		SetStatus.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					String s = "UPDATE Fast_Food.order SET Order_Status = ? where Order_Number=?";
					PreparedStatement pst = conn.prepareStatement(s);
					pst.setString(1, (String)OrderStatus.getSelectedItem());
					pst.setString(2, (String)OrderNum.getSelectedItem());
					int rs=pst.executeUpdate();
					pst = conn.prepareStatement(s);
					rs = pst.executeUpdate();
					pst.close();
				}catch(SQLException e1) {
					System.out.print("");
				}
			}
		});
/////////////////////////////////// Load Table Button ////////////////////////////////////////////////////////	
		JButton LoadTableButton = new JButton("Load Table");
		LoadTableButton.setForeground(new Color(0, 0, 0));
		LoadTableButton.setBackground(new Color(255, 255, 102));
		LoadTableButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
		LoadTableButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try{
					Class.forName("com.mysql.jdbc.Driver");
					java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Fast_Food","root","password");
					String query="Select * from Fast_Food.order where Order_Status = 'Not Ready'";

					PreparedStatement pst = conn.prepareStatement(query);
					ResultSet rs = pst.executeQuery();
					table.setModel(DbUtils.resultSetToTableModel(rs));

					pst.close();
					rs.close();				
				}catch(Exception e2) {
					e2.printStackTrace();
				}
			}
		});
		JScrollPane scrollPane_1 = new JScrollPane();
////////////////////////////// DISPLAY ORDER ITEM //////////////////////////////////////////////////////////		
		JButton DisplayOrderItem = new JButton("Display Order Criteria");
		DisplayOrderItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try{
					Class.forName("com.mysql.jdbc.Driver");
					java.sql.Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Fast_Food","root","password");
//					String query="Select Name from Fast_Food.product where Product_Code = 10";//= fast_food.order_item.Product_Code and where order_item.Order_Number = 1";
					//String query="Select Product_Name from order_item where Order_Number = 2";//= fast_food.order_item.Product_Code and where order_item.Order_Number = 1";
					String query = "Select * from fast_food.order_item WHERE Order_Number = ?";
					PreparedStatement pst = conn.prepareStatement(query);
		        	pst.setString(1, (String)OrderNum.getSelectedItem());
		        	java.sql.ResultSet rs=pst.executeQuery();
		        	table.setModel(DbUtils.resultSetToTableModel(rs));				        
		        	pst.close();
					} catch (SQLException | ClassNotFoundException e1) 
		    	{						
						System.out.print(e1);
					}					
		        }
		    });
		DisplayOrderItem.setForeground(Color.BLACK);
		DisplayOrderItem.setFont(new Font("Tahoma", Font.PLAIN, 18));
		DisplayOrderItem.setBackground(new Color(255, 255, 102));
//////////////////////////////GROUP LAYOUT////////////////////////////////////////////////////////////////
		GroupLayout groupLayout = new GroupLayout(frame.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(groupLayout.createSequentialGroup()
							.addGap(20)
							.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 910, GroupLayout.PREFERRED_SIZE))
						.addGroup(groupLayout.createSequentialGroup()
							.addGap(179)
							.addComponent(LoadTableButton, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE)
							.addGap(108)
							.addComponent(DisplayOrderItem)
							.addGap(126)
							.addComponent(SetStatus, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addGroup(groupLayout.createSequentialGroup()
					.addGap(49)
					.addComponent(NumberLabel, GroupLayout.PREFERRED_SIZE, 136, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(OrderNum, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE)
					.addGap(140)
					.addComponent(StatusLabel, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
					.addComponent(OrderStatus, GroupLayout.PREFERRED_SIZE, 243, GroupLayout.PREFERRED_SIZE)
					.addGap(41))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.TRAILING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap()
					.addComponent(scrollPane_1, GroupLayout.PREFERRED_SIZE, 147, GroupLayout.PREFERRED_SIZE)
					.addGap(77)
					.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(LoadTableButton, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
						.addComponent(SetStatus, GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
						.addComponent(DisplayOrderItem, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE))
					.addGap(66)
					.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(NumberLabel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
						.addComponent(OrderNum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(StatusLabel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
						.addComponent(OrderStatus, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
					.addGap(236))
		);

		table = new JTable();
		scrollPane_1.setViewportView(table);
		table.setModel(new DefaultTableModel(
				new Object[][] {
					{null, null, null, null, null, null},
				},
				new String[] {
						"Order_Number", "Total_Cost", "Time", "Date", "Paid", "Order_Status"
				}
				));
		table.getColumnModel().getColumn(0).setPreferredWidth(89);
		table.getColumnModel().getColumn(5).setPreferredWidth(79);
		frame.getContentPane().setLayout(groupLayout);
	}
}
